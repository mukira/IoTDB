import datetime
from uuid import uuid1, UUID
import random

from cassandra.cluster import Cluster

cluster = Cluster(['127.0.0.1'])
session = cluster.connect('iotdb')

# Setting these globally reduces cass overhead
get_timestream_query = None

class DatabaseError(Exception):
    """
    The base error that functions in this module will raise when things go 
    wrong
    """
    pass

class NotFound(DatabaseError):
    """
    Error for when an object is not found in the database
    """
    pass

class InvalidDictionary(DatabaseError):
    pass


# QUERYING APIS

def get_timestream_data(sensor_id, start, end):
    """ 
    Given a start/end time and sensor_id, can we find the data they want
    """
    global get_timestream_query
    if get_timestream_query is None:
        get_timestream_query = session.prepare("""     
            SELECT event_time, measurement    
            FROM timestream_by_day                                            
            WHERE sensor_id=? AND date=?;         
        """)

    # Figure out all the days that we're going to need to pull from start to finish
    no_days = (end-start).days
    start_day = start.date()
    end_day = end.date()

    # In theory, if necessary, I can program a check in here to make sure we're 
    # 1. Not trying to pull days that have no data
    # 2. Not trying to pull days before we've started
    full_days = [start_day+datetime.timedelta(days=i) for i in range(1,no_days+2)]

